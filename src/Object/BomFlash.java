package Object;import Map.Manager;import sound.GameSound;import javax.imageio.ImageIO;import java.awt.*;import java.awt.image.BufferedImage;import java.io.File;import java.io.IOException;public class BomFlash  {    private BufferedImage bomFlasUp;            // ảnh lửa lên    private BufferedImage bomFlasDown;          // ảnh lửa xuống    private BufferedImage bomFlasLeft;          // ảnh lửa trái    private BufferedImage bomFlasRight;         // ảnh lửa phải    private int lengUp;    private int lengDown;    private int lengLeft;    private int lengRight;    boolean checkup = false;    boolean checkdown = false;    boolean checkleft = false;    boolean checkright = false;    private int x;    private int y;    public int hadItem;    public BomFlash(int x, int y, Manager manager, int hadItem)  {        try {            this.bomFlasDown = ImageIO.read(new File("image/bombbangO.png"));            this.bomFlasUp = ImageIO.read(new File("image/bombbangO.png"));            this.bomFlasLeft = ImageIO.read(new File("image/bombbangO.png"));            this.bomFlasRight = ImageIO.read(new File("image/bombbangO.png"));            this.x = x;            this.y = y;            this.hadItem = hadItem;            this.lengUp = 0;            this.lengDown = 0;            this.lengLeft = 0;            this.lengRight = 0;        }        catch (Exception e){            e.printStackTrace();        }            for(int j=1; j<=hadItem+1; j++) {                Rectangle flashup = new Rectangle(x, y-45*j, 45, 45+45*j);                Rectangle flashdown = new Rectangle(x, y, 45, 45+45*j);                Rectangle flashleft = new Rectangle(x - j*45,y, 45+45*j,45);                Rectangle flashright = new Rectangle(x , y, 45+45*j,45);                for(int i=0; i<manager.getArrBox().size(); i++ ){                    Rectangle box = new Rectangle(manager.getArrBox().get(i).getX(), manager.getArrBox().get(i).getY(), 45,45 );                        if(box.intersects(flashup)){                            lengUp = 1;                            if(manager.getArrBox().get(i).getType() == 0){                                checkup = true;                                //System.out.println("g");                            }                        }                        if(box.intersects(flashdown)){                            lengDown = 1;                            if(manager.getArrBox().get(i).getType() == 0) {                                checkdown = true;                            }                        }                        if(box.intersects(flashleft)){                            lengLeft = 1;                            if(manager.getArrBox().get(i).getType() == 0) {                                checkleft = true;                            }                        }                        if(box.intersects(flashright)){                            lengRight = 1;                            if(manager.getArrBox().get(i).getType() == 0) {                                checkright = true;                            }                        }            }                try {                    if(lengDown == 0) {                        this.bomFlasDown = ImageIO.read(new File("image/bombbang_down"+j+".png"));                    }                    if(lengLeft == 0) {                        this.bomFlasLeft = ImageIO.read(new File("image/bombbang_left"+j+".png"));                    }                    if(lengRight == 0){                        this.bomFlasRight = ImageIO.read(new File("image/bombbang_right"+j+".png"));                    }                    if(lengUp == 0) {                        this.bomFlasUp = ImageIO.read(new File("image/bombbang_up" + j + ".png"));                    }                }                catch (Exception e){                    e.printStackTrace();                }        }        if(checkdown) {            setBomFlasDown((bomFlasDown.getHeight())/45);        }        if(checkup) {            setBomFlasUp((bomFlasUp.getHeight())/45);        }        if(checkright) {            setBomFlasRight((bomFlasRight.getWidth())/45);        }        if(checkleft) {            setBomFlasLeft((bomFlasLeft.getWidth())/45);        }    }    public void draw(Graphics2D g2){        if(x + bomFlasRight.getWidth() > 720 ) {            int width = (702 - x)/45;            if(width==0) setBomFlasRightO();            else setBomFlasRight(width);            g2.drawImage(bomFlasRight,x,y,720-x,45,null);        }        else g2.drawImage(bomFlasRight,x,y,null);        if(y+bomFlasDown.getHeight()>630) {            int height = (603-y)/45;            if(height==0) setBomFlasDownO();            else setBomFlasDown(height);            g2.drawImage(bomFlasDown,x,y,45,630-y,null);        }        else g2.drawImage(bomFlasDown,x,y,null);        if(y - bomFlasUp.getHeight() < 45) {            int height = (y-45)/45;            if(height==0) setBomFlasUpO();            else setBomFlasUp(height);            g2.drawImage(bomFlasUp,x,45,null);        }        else {            g2.drawImage(bomFlasUp,x,y-getBomFlasUp().getHeight()+45,null);        }        if(x - bomFlasLeft.getWidth() < 45){            int weidth = (x-45)/45;            if(weidth==0) setBomFlasLeftO();            else setBomFlasLeft(weidth);            g2.drawImage(bomFlasLeft,45,y,null);        }        else g2.drawImage(bomFlasLeft,x-getBomFlasLeft().getWidth()+45,y,null);    }    public void update(int x, int y, Manager manager){        Rectangle rectangleup = new Rectangle(x,y-bomFlasUp.getHeight()+45,45,bomFlasUp.getHeight());        Rectangle rectangledown = new Rectangle(x,y,45,bomFlasDown.getHeight());        Rectangle rectangleleft = new Rectangle(x+45-bomFlasLeft.getWidth(),y,bomFlasLeft.getWidth(),45);        Rectangle rectangleright = new Rectangle(x,y,bomFlasRight.getWidth(),45);        //System.out.println(x+45-bomFlasLeft.getWidth() + " " + y + " " + bomFlasLeft.getWidth());        for(int i=0; i< manager.getArrBox().size(); i++) {            Rectangle rectanglebBox = new Rectangle(manager.getArrBox().get(i).getX(), manager.getArrBox().get(i).getY(),                    45,45);            if(rectanglebBox.intersects(rectangleup) && manager.getArrBox().get(i).getType()==0){                //System.out.println("xoa");                manager.getArrBox().remove(i);                GameSound.getIstance().getAudio(GameSound.BONG_BANG).play();            }            if(rectanglebBox.intersects(rectangledown)&& manager.getArrBox().get(i).getType()==0){                //System.out.println("xoa");                manager.getArrBox().remove(i);                GameSound.getIstance().getAudio(GameSound.BONG_BANG).play();            }            if(rectanglebBox.intersects(rectangleleft)&& manager.getArrBox().get(i).getType()==0){                //System.out.println("xoa");                manager.getArrBox().remove(i);                GameSound.getIstance().getAudio(GameSound.BONG_BANG).play();            }            if(rectanglebBox.intersects(rectangleright)&& manager.getArrBox().get(i).getType()==0){                //System.out.println("xoa");                manager.getArrBox().remove(i);                GameSound.getIstance().getAudio(GameSound.BONG_BANG).play();            }        }        for(int i=0; i<manager.getArrMonster().size(); i++){            Rectangle rectanglemonster  = new Rectangle(manager.getArrMonster().get(i).getX(), manager.getArrMonster().get(i).getY(),                                            manager.getArrMonster().get(i).getWidth(),manager.getArrMonster().get(i).getHeight());            if(rectanglemonster.intersects(rectangledown)) {                manager.getArrMonster().remove(i);                GameSound.getIstance().getAudio(GameSound.MONSTER_DIE).play();            }            else if(rectanglemonster.intersects(rectangleup)) {                manager.getArrMonster().remove(i);                GameSound.getIstance().getAudio(GameSound.MONSTER_DIE).play();            }            else if(rectanglemonster.intersects(rectangleleft)) {                manager.getArrMonster().remove(i);                GameSound.getIstance().getAudio(GameSound.MONSTER_DIE).play();            }            else if(rectanglemonster.intersects(rectangleright)) {                manager.getArrMonster().remove(i);                GameSound.getIstance().getAudio(GameSound.MONSTER_DIE).play();            }        }    }    public boolean impaction(BomberMan bomberMan){        Rectangle bomber = new Rectangle(bomberMan.getPosX(), bomberMan.getPosY() + bomberMan.getHeight()-45,                bomberMan.getWidth(),45);        Rectangle up = new Rectangle(this.x,y+45-getBomFlasUp().getHeight(), 45, getBomFlasUp().getHeight());        Rectangle dow = new Rectangle(this.x, this.y, 45, getBomFlasDown().getHeight());        Rectangle left = new Rectangle(this.x- getBomFlasLeft().getWidth()+45, y,getBomFlasLeft().getWidth(),45);        Rectangle right = new Rectangle(this.x, this.y, getBomFlasRight().getWidth(), 45);        if(bomber.intersects(up) || bomber.intersects(dow) || bomber.intersects(left) || bomber.intersects(right)){            GameSound.getIstance().stop();            GameSound.getIstance().getAudio(GameSound.LOSE).play();            return true;        }        else return false;    }    public BufferedImage getBomFlasUp() {        return bomFlasUp;    }    public BufferedImage getBomFlasDown() {        return bomFlasDown;    }    public BufferedImage getBomFlasLeft() {        return bomFlasLeft;    }    public BufferedImage getBomFlasRight() {        return bomFlasRight;    }    public void setBomFlasUp(int x) {        try {            this.bomFlasUp = ImageIO.read(new File("image/bombbang_up"+x+".png"));        } catch (IOException e) {            e.printStackTrace();        }    }    public void setBomFlasDown(int x) {        try {            this.bomFlasDown = ImageIO.read(new File("image/bombbang_down"+x+".png"));        } catch (IOException e) {            e.printStackTrace();        }    }    public void setBomFlasLeft(int x) {        try {            this.bomFlasLeft = ImageIO.read(new File("image/bombbang_left"+x+".png"));        } catch (IOException e) {            e.printStackTrace();        }    }    public void setBomFlasRight(int x) {        try {            this.bomFlasRight = ImageIO.read(new File("image/bombbang_right"+x+".png"));        } catch (IOException e) {            e.printStackTrace();        }    }    public void setBomFlasRightO(){        try {            this.bomFlasRight = ImageIO.read(new File("image/bombbangO.png"));        } catch (IOException e) {            e.printStackTrace();        }    }    public void setBomFlasLeftO(){        try {            this.bomFlasLeft = ImageIO.read(new File("image/bombbangO.png"));        } catch (IOException e) {            e.printStackTrace();        }    }    public void setBomFlasUpO(){        try {            this.bomFlasUp = ImageIO.read(new File("image/bombbangO.png"));        } catch (IOException e) {            e.printStackTrace();        }    }    public void setBomFlasDownO(){        try {            this.bomFlasDown = ImageIO.read(new File("image/bombbangO.png"));        } catch (IOException e) {            e.printStackTrace();        }    }    public int getHadItem() {        return hadItem;    }    public void setHadItem(int hadItem) {        this.hadItem = hadItem;    }}