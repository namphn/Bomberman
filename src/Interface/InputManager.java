package Interface;import java.awt.event.KeyEvent;import Map.Manager;import Object.BomberMan;import sound.GameSound;public class InputManager {    /**     * class này dùng để xử lí khi nhận sự kiện từ bàn phím     */    private Manager manager;    private GamePanel gamePanel;    private int i = 0;    public InputManager(GamePanel gamePanel, Manager manager){        this.manager = manager;        this.gamePanel = gamePanel;    }    /**     * hàm xử lí sự kiện nhấn phím     * @param keyCode     */    public void processKeyPreesed(int keyCode){        switch (keyCode){            case KeyEvent.VK_UP:                gamePanel.bomberMan.setRunning(true);                gamePanel.bomberMan.setStanding(false);                gamePanel.bomberMan.setDirection(BomberMan.DIR_UP);                gamePanel.bomberMan.setSpeedUpDown(-manager.buff.speed);                gamePanel.bomberMan.setSpeedRightLef(0);                runActor();                //System.out.println(gamePanel.bomberMan.getPosX() + " " + gamePanel.bomberMan.getPosY());                break;            case KeyEvent.VK_DOWN:                gamePanel.bomberMan.setRunning(true);                gamePanel.bomberMan.setStanding(false);                gamePanel.bomberMan.setDirection(BomberMan.DIR_DOWN);                gamePanel.bomberMan.setSpeedUpDown(manager.buff.speed);                gamePanel.bomberMan.setSpeedRightLef(0);                runActor();                break;            case KeyEvent.VK_LEFT:                gamePanel.bomberMan.setRunning(true);                gamePanel.bomberMan.setStanding(false);                gamePanel.bomberMan.setDirection(BomberMan.DIR_LEFT);                gamePanel.bomberMan.setSpeedRightLef(-manager.buff.speed);                gamePanel.bomberMan.setSpeedUpDown(0);                runActor();                break;            case KeyEvent.VK_RIGHT:                gamePanel.bomberMan.setRunning(true);                gamePanel.bomberMan.setStanding(false);                gamePanel.bomberMan.setDirection(BomberMan.DIR_RIGHT);                gamePanel.bomberMan.setSpeedRightLef(manager.buff.speed);                gamePanel.bomberMan.setSpeedUpDown(0);                runActor();                break;            case KeyEvent.VK_SPACE:                if(gamePanel.bomberMan.getBom().isSetBom() == true) break;                if(gamePanel.bomberMan.getBom().isIgnite()==true) break;                else {                    //System.out.println(gamePanel.bomberMan.isSetBom());                    gamePanel.bomberMan.getBom().setTime(System.nanoTime());                    gamePanel.bomberMan.getBom().setSetBom(true);                    if(gamePanel.bomberMan.getBom().impactionBomberBox(gamePanel.bomberMan)) {                        gamePanel.bomberMan.getBom().setPosXBom(((gamePanel.bomberMan.getPosX()+gamePanel.bomberMan.getWidth()/2)/45)*45);                        gamePanel.bomberMan.getBom().setPosYBom(((gamePanel.bomberMan.getPosY()+gamePanel.bomberMan.getHeight())/45)*45);                    }                    else {                        gamePanel.bomberMan.getBom().setPosXBom(((gamePanel.bomberMan.getPosX() + gamePanel.bomberMan.getWidth() / 2) / 45) * 45);                        gamePanel.bomberMan.getBom().setPosYBom(((gamePanel.bomberMan.getPosY() + gamePanel.bomberMan.getHeight() * 2 / 3) / 45) * 45);                    }                    gamePanel.bomberMan.getBom().flashbom();                    break;                }            case KeyEvent.VK_W:                gamePanel.bomberMan.setRunning(true);                gamePanel.bomberMan.setStanding(false);                gamePanel.bomberMan.setDirection(BomberMan.DIR_UP);                gamePanel.bomberMan.setSpeedUpDown(-manager.buff.speed);                gamePanel.bomberMan.setSpeedRightLef(0);                runActor();                //System.out.println(gamePanel.bomberMan.getPosX() + " " + gamePanel.bomberMan.getPosY());                break;            case KeyEvent.VK_S:                gamePanel.bomberMan.setRunning(true);                gamePanel.bomberMan.setStanding(false);                gamePanel.bomberMan.setDirection(BomberMan.DIR_DOWN);                gamePanel.bomberMan.setSpeedUpDown(manager.buff.speed);                gamePanel.bomberMan.setSpeedRightLef(0);                runActor();                break;            case KeyEvent.VK_A:                gamePanel.bomberMan.setRunning(true);                gamePanel.bomberMan.setStanding(false);                gamePanel.bomberMan.setDirection(BomberMan.DIR_LEFT);                gamePanel.bomberMan.setSpeedRightLef(-manager.buff.speed);                gamePanel.bomberMan.setSpeedUpDown(0);                runActor();                break;            case KeyEvent.VK_D:                gamePanel.bomberMan.setRunning(true);                gamePanel.bomberMan.setStanding(false);                gamePanel.bomberMan.setDirection(BomberMan.DIR_RIGHT);                gamePanel.bomberMan.setSpeedRightLef(manager.buff.speed);                gamePanel.bomberMan.setSpeedUpDown(0);                runActor();                break;            case KeyEvent.VK_J:                if(gamePanel.bomberMan.getBom().isSetBom() == true) break;                if(gamePanel.bomberMan.getBom().isIgnite()==true) break;                else {                    //System.out.println(gamePanel.bomberMan.isSetBom());                    gamePanel.bomberMan.getBom().setTime(System.nanoTime());                    gamePanel.bomberMan.getBom().setSetBom(true);                    if(gamePanel.bomberMan.getBom().impactionBomberBox(gamePanel.bomberMan)) {                        gamePanel.bomberMan.getBom().setPosXBom(((gamePanel.bomberMan.getPosX()+gamePanel.bomberMan.getWidth()/2)/45)*45);                        gamePanel.bomberMan.getBom().setPosYBom(((gamePanel.bomberMan.getPosY()+gamePanel.bomberMan.getHeight())/45)*45);                    }                    else {                        gamePanel.bomberMan.getBom().setPosXBom(((gamePanel.bomberMan.getPosX() + gamePanel.bomberMan.getWidth() / 2) / 45) * 45);                        gamePanel.bomberMan.getBom().setPosYBom(((gamePanel.bomberMan.getPosY() + gamePanel.bomberMan.getHeight() * 2 / 3) / 45) * 45);                    }                    gamePanel.bomberMan.getBom().flashbom();                    break;                }        }    }    /**     * hàm xử lí sự kiện nhả phím     * @param keyCode     */    public void processKeyReleased(int keyCode){        switch (keyCode){            case KeyEvent.VK_UP:                gamePanel.bomberMan.setDirection(BomberMan.DIR_UP);                gamePanel.bomberMan.setRunning(false);                gamePanel.bomberMan.setStanding(true);                gamePanel.bomberMan.setSpeedUpDown(0);                gamePanel.bomberMan.setSpeedRightLef(0);                break;            case KeyEvent.VK_DOWN:                gamePanel.bomberMan.setDirection(BomberMan.DIR_DOWN);                gamePanel.bomberMan.setRunning(false);                gamePanel.bomberMan.setStanding(true);                gamePanel.bomberMan.setSpeedUpDown(0);                gamePanel.bomberMan.setSpeedRightLef(0);                break;            case KeyEvent.VK_LEFT:                gamePanel.bomberMan.setDirection(BomberMan.DIR_LEFT);                gamePanel.bomberMan.setRunning(false);                gamePanel.bomberMan.setStanding(true);                gamePanel.bomberMan.setSpeedUpDown(0);                gamePanel.bomberMan.setSpeedRightLef(0);                break;            case KeyEvent.VK_RIGHT:                gamePanel.bomberMan.setDirection(BomberMan.DIR_RIGHT);                gamePanel.bomberMan.setRunning(false);                gamePanel.bomberMan.setStanding(true);                gamePanel.bomberMan.setSpeedUpDown(0);                gamePanel.bomberMan.setSpeedRightLef(0);                break;            case KeyEvent.VK_W:                gamePanel.bomberMan.setDirection(BomberMan.DIR_UP);                gamePanel.bomberMan.setRunning(false);                gamePanel.bomberMan.setStanding(true);                gamePanel.bomberMan.setSpeedUpDown(0);                gamePanel.bomberMan.setSpeedRightLef(0);                break;            case KeyEvent.VK_S:                gamePanel.bomberMan.setDirection(BomberMan.DIR_DOWN);                gamePanel.bomberMan.setRunning(false);                gamePanel.bomberMan.setStanding(true);                gamePanel.bomberMan.setSpeedUpDown(0);                gamePanel.bomberMan.setSpeedRightLef(0);                break;            case KeyEvent.VK_A:                gamePanel.bomberMan.setDirection(BomberMan.DIR_LEFT);                gamePanel.bomberMan.setRunning(false);                gamePanel.bomberMan.setStanding(true);                gamePanel.bomberMan.setSpeedUpDown(0);                gamePanel.bomberMan.setSpeedRightLef(0);                break;            case KeyEvent.VK_D:                gamePanel.bomberMan.setDirection(BomberMan.DIR_RIGHT);                gamePanel.bomberMan.setRunning(false);                gamePanel.bomberMan.setStanding(true);                gamePanel.bomberMan.setSpeedUpDown(0);                gamePanel.bomberMan.setSpeedRightLef(0);                break;        }    }    private void runActor() {        i++;        if (i == 4) {            GameSound.getIstance().getAudio(GameSound.FOOT).play();            i = 0;        }    }}